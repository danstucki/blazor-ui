@using AddRemoveTiles.Models
@using Telerik.DataSource
@using Telerik.DataSource.Extensions

<TelerikGrid @ref="@GridTopEpisodes" TItem="@PodcastViewModel" OnRead="@ReadItems"
             Sortable="true" Height="100%" Pageable="false" ScrollMode="@GridScrollMode.Scrollable"
             OnStateInit="@((GridStateEventArgs<PodcastViewModel> args) => OnStateInit(args))">
    <GridColumns>
        <GridColumn Field="@( nameof(PodcastViewModel.Name) )" Title="Podcast Episode" Width="320px" />
        <GridColumn Field="@( nameof(PodcastViewModel.Streams) )" Width="150px" />
        <GridColumn Field="@( nameof(PodcastViewModel.Downloads) )" Width="150px" />
    </GridColumns>
</TelerikGrid>

@code {
    [Parameter]
    public IEnumerable<PodcastViewModel> Podcasts { get; set; }

    [Parameter]
    public int TopN { get; set; } = 5;

    TelerikGrid<PodcastViewModel> GridTopEpisodes { get; set; }

    protected void ReadItems(GridReadEventArgs args)
    {
        args.Request.PageSize = TopN;
        var datasourceResult = Podcasts.ToDataSourceResult(args.Request);

        args.Data = (datasourceResult.Data as IEnumerable<PodcastViewModel>).ToList();
        args.Total = datasourceResult.Total;
    }

    void UpdateTopEpisodes()
    {
        if (GridTopEpisodes != null && Podcasts != null)
        {
            GridTopEpisodes.Rebind();
        }
    }

    protected override void OnParametersSet()
    {
        UpdateTopEpisodes();
        base.OnParametersSet();
    }

    void OnStateInit(GridStateEventArgs<PodcastViewModel> args)
    {
        args.GridState = new GridState<PodcastViewModel>()
        {
            SortDescriptors = new List<SortDescriptor>
            {
                new SortDescriptor { Member = nameof(PodcastViewModel.Streams), SortDirection = ListSortDirection.Descending }
            }
        };
    }
}
