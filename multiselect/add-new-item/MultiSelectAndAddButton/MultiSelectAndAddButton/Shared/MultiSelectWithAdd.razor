@using System.Collections.ObjectModel
@using MultiSelectAndAddButton.Data

@inject IJSRuntime _js
@inject MsOptionsService _dataService

<ul>
    <li>Click in the MultiSelect.</li>
    <li>Select predefined items, or type a new one - this will show the Add button.</li>
</ul>

<TelerikMultiSelect TItem="@OptionsModel" TValue="@int"
                    @bind-Value="@Tags" OnRead="@ReadItems"
                    OnChange="@RaiseTagsChanged"
                    TextField="StringRepresentation"
                    ValueField="MyValueField"
                    Filterable="true"
                    AutoClose="false"
                    Width="300px"
                    Id="@Id"
                    @ref="@MultiSelectWithButton">
    <FooterTemplate>
        @if (_isNewTag && !string.IsNullOrEmpty(_currentFilterValue))
        {
            <div style="margin:1em;text-align:center;">
                <TelerikButton OnClick="@OnCreateRecord">Create '@_currentFilterValue'</TelerikButton>
            </div>
        }
    </FooterTemplate>
</TelerikMultiSelect>

@code{
    [Parameter]
    public List<int> Tags { get; set; } = new List<int>();

    [Parameter]
    public EventCallback<List<int>> TagsChanged { get; set; }

    TelerikMultiSelect<OptionsModel, int> MultiSelectWithButton { get; set; }

    // used to check if the search string exists in the data
    List<OptionsModel> Options { get; set; } = new List<OptionsModel>();

    // used to get the current user input and to show the Add button
    string _currentFilterValue { get; set; }
    bool _isNewTag => IsNew();

    // used for the hack
    bool shouldClearInput { get; set; }
    bool shouldUpdateTags { get; set; }

    string Id { get; set; } = "ms" + Guid.NewGuid().ToString();

    // Event for the parent component
    async Task RaiseTagsChanged(object theTags)
    {
        await TagsChanged.InvokeAsync(Tags);
    }

    // insertion in the data source, local data and Values collection
    async Task OnCreateRecord()
    {
        OptionsModel insertedOption = await _dataService.AddOption(_currentFilterValue);

        // continues with a hack in OnRead and OnAfterRenderAsync
        Tags.Add(insertedOption.MyValueField);
        shouldClearInput = true;

        MultiSelectWithButton.Rebind();

        // raises event for parent componets to use
        await TagsChanged.InvokeAsync(Tags);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (shouldUpdateTags)
        {
            shouldUpdateTags = false;

            // hack to refresh the selected values AFTER the MultiSelect is rebound
            Tags = new List<int>(Tags);
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    // sample check to know whether to show the Add button. You should keep it synchronous - the service
    // should have already taken care to return properly filtered data based on the current input (not implemented here)
    bool IsNew()
    {
        var matchingOptions = Options.Where(opt => opt.StringRepresentation == _currentFilterValue);
        bool hasMatch = matchingOptions.Any();
        return !hasMatch;
    }

    // used for loading on demand, for getting the current user input, and for hacking the MultiSelect component to update the value
    // after the service returns the inserted item, and a new OnRead has fired that populated the actual Data of the component
    async Task ReadItems(MultiSelectReadEventArgs args)
    {
        string userInput = string.Empty;
        if (args.Request.Filters.Count > 0)
        {
            Telerik.DataSource.FilterDescriptor filter = args.Request.Filters[0] as Telerik.DataSource.FilterDescriptor;
            userInput = filter.Value.ToString();
            // we use this code to get the user input
        }
        _currentFilterValue = userInput;

        // new data collection comes down from the service. In this example we hardcode a few items
        // in a real case you may want to actually use the current user input and method, see more at
        // https://docs.telerik.com/blazor-ui/components/multiselect/events#onread
        var currOpts = await _dataService.GetOptions();
        args.Data = Options = new List<OptionsModel>(currOpts);

        // hack for clearing the search textbox and raise another flag for OnAfterRenderAsync
        if (shouldClearInput)
        {
            shouldClearInput = false;
            shouldUpdateTags = true;

            await _js.InvokeVoidAsync("clearInput", Id);
        }
    }
}
